object prueba {
  method robertoTieneBici() {
    roberto.vehiculo(bici)
  }
  method robertoTieneCamionCon1Acoplado() {
    roberto.vehiculo(camionAcoplado)
  }
  method unAcopladoMasParaElCamionDeRoberto() {
    roberto.vehiculo(camion2Acoplado)
  }
}

object roberto {
  var vehiculo = bici
  const peso = 90
  var credito = 0
  
  method credito() {
    return credito
  }
  
  method vehiculo(unVehiculo) {
    vehiculo = unVehiculo
  }
  
  method peso() {
    return peso + vehiculo.peso()
  }
  
  method vehiculo() {
    return vehiculo
  }
}

object bici {
  method peso() = 1
}

object camionAcoplado {
  
  const peso = 500
  
  method peso() {
    return peso 
  }
  
}

object camion2Acoplado {
  var acopladosDeMas = 1
  const peso = 500
  
  method peso() {
    return peso + 500 * acopladosDeMas
  }
  
  method agregarAcoplado() {
    acopladosDeMas += 1
  }
}

object laMatrix {
  method dejaEntrar(unaPersona) {
    return unaPersona.credito() >= 5
  }
}

object neo {
  var credito = 7
  const peso = 0
  
  method llamar() {
    credito -= 5
  }
  
  method credito() = credito
  
  method peso() = peso
}

object puenteDeBrooklyn {
  method dejaEntrar(unaPersona) {
    return 1000 >= unaPersona.peso()
  }
}

object paquete {
  var destino = laMatrix
  var pagado = false
  
  method pagar() {
    pagado = true
  }
  
  method estaPago() {
    return pagado
  }
  
  method destino(unDestino) {
    destino = unDestino
  }
  
  method puedeSerEntregadoPor(unaPersona) {
    return destino.dejaEntrar(unaPersona) && pagado
  }
}